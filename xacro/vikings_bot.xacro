<?xml version="1.0"?>
<robot name="vikings_bot" xmlns:xacro="http://ros.org/wiki/xacro">

    <!-- Argumnets -->
    <xacro:arg name="vikings_bot_name" default="vikings_bot"/>
    <xacro:arg name="use_sim" default="true"/>

    <!-- Robot properties -->
    <xacro:property name="robot_name" value="$(arg vikings_bot_name)"/>
    <xacro:property name="use_sim" value="$(arg use_sim)"/>

    <!-- Include robot properties -->
    <xacro:include filename="$(find vikings_bot_description)/xacro/properties.xacro"/>

    <!-- Include robot materials -->
    <xacro:include filename="$(find vikings_bot_description)/xacro/materials.xacro"/>

    <!-- Include macro files -->
    <xacro:include filename="$(find vikings_bot_description)/xacro/wheels.xacro"/>
    <xacro:include filename="$(find vikings_bot_description)/xacro/castor_wheels.xacro"/>
    <xacro:include filename="$(find realsense2_description)/urdf/_d415.urdf.xacro"/>


    <!-- Include Gazebo related files -->


    <!-- ROBOT -->
    <!-- Base link -->
    <link name="base_link">
        <inertial>
            <mass value="0.05"/>
            <origin xyz=" 0 0 0" rpy="0 0 0" />
            <inertia ixx="0" ixy="0" ixz="0"
                     iyx="0" iyy="0" iyz="0"
                     izx="0" izy="0" izz="0" />   
        </inertial>
    </link>

    <!-- Chassis link-->
    <link name="chassis_link">
        <visual>
            <geometry>
                <box size="${vikings_bot_x} ${vikings_bot_y} ${vikings_bot_z}"/>
            </geometry>
            <material name="blue"/>
        </visual>

        <inertial>
            <mass value="${vikings_bot_mass}"/>
            <origin xyz=" 0 0 0" rpy="0 0 0" />
            <inertia ixx="2.6245" ixy="0" ixz="0"
                     iyx="0" iyy="5.3125" iyz="0"
                     izx="0" izy="0" izz="7.3120" />   
        </inertial>

        <collision>
            <geometry>
                <box size="${vikings_bot_x} ${vikings_bot_y} ${vikings_bot_z}"/>
            </geometry>
        </collision>
    </link>
    <gazebo reference="chassis_link">
        <material>Gazebo/Blue</material>
        <!-- friction -->
        <mu1>100</mu1>
        <mu2>100</mu2>
        <!-- stiffness -->
        <kp>100000000000000000</kp>
        <kd>100000000000000000</kd>
    </gazebo>

    <!-- Chassis joint-->
    <joint name="chassis_joint" type="fixed">
        <parent link="base_link"/>
        <child link="chassis_link"/>
        <!-- <origin xyz="0 0 0" rpy="0 0 0"/> -->
        <origin xyz="${-(wheel_xoff)} 0 ${-(wheel_zoff)}" rpy="0 0 0"/>
    </joint>
    <gazebo reference="chassis_joint">
        <preserveFixedJoint>true</preserveFixedJoint>
    </gazebo>


    <!-- Footprint link-->
    <link name="base_footprint_link"/>

    <!-- Footprint joint -->
    <joint name="base_footprint_joint" type="fixed">
        <parent link="base_link"/>
        <child link="base_footprint_link"/>
        <origin xyz="0 0 ${-(wheel_radius-wheel_zoff)}" rpy="0 0 0"/>
    </joint>
    <gazebo reference="base_footprint_joint">
        <preserveFixedJoint>true</preserveFixedJoint>
    </gazebo>


    <!-- Drive wheels -->
    <xacro:drive_wheel prefix="left" parent="base_link" y_reflect="1.0"/>
    <xacro:drive_wheel prefix="right" parent="base_link" y_reflect="-1.0"/>

    <!-- Castor wheels -->
    <xacro:castor_wheel prefix="left" parent="chassis_link" y_reflect="1.0"/>
    <xacro:castor_wheel prefix="right" parent="chassis_link" y_reflect="-1.0"/>

    <!-- Lidar -->
    <link name="lidar_link">
        <visual>
            <origin xyz="0 0 0" rpy="0 0 ${1.57*2}"/>
            <geometry>
                <mesh filename="package://vikings_bot_description/meshes/sensors/rplidar.dae"
                      scale="1 1 1"/>
            </geometry>
        </visual>

        <inertial>
            <mass value="0.2"/>
            <origin xyz=" 0 0 0" rpy="0 0 0" />
            <inertia ixx="1e-7" ixy="0" ixz="0"
                     iyx="0" iyy="1e-7" iyz="0"
                     izx="0" izy="0" izz="1e-7" />   
        </inertial>

        <collision>
            <origin xyz="0 0 0.03" rpy="0 0 0"/>
            <geometry>
                <box size="0.08 0.08 0.08"/>
            </geometry>
        </collision>
    </link>
    <gazebo reference="lidar_link">
        <material>Gazebo/Grey</material>
        <!-- friction -->
        <mu1>100</mu1>
        <mu2>100</mu2>
        <!-- stiffness -->
        <kp>100000000000000000</kp>
        <kd>100000000000000000</kd>
    </gazebo>

    <joint name="lidar_link_joint" type="fixed">
        <parent link="chassis_link"/>
        <child link="lidar_link"/>
        <origin xyz="${lidar_xoff} ${lidar_yoff} ${lidar_zoff}" rpy="0 0 0"/>
    </joint>

    <!-- Camera -->
    <!-- realsense2_description package manages camera's description (geometry etc.) -->
    <!-- using nominal extrinsics only in sim because realsense-ros provides it for real camera -->
    <xacro:sensor_d415 parent="chassis_link" use_nominal_extrinsics="${use_sim}">
        <origin xyz="${camera_xoff} ${camera_yoff} ${camera_zoff}" rpy="0 0 0"/>
    </xacro:sensor_d415>
   
    <gazebo reference="camera_link">
        <material>Gazebo/Grey</material>
        <!-- friction -->
        <mu1>100</mu1>
        <mu2>100</mu2>
        <!-- stiffness -->
        <kp>100000000000000000</kp>
        <kd>100000000000000000</kd>
    </gazebo>


    <!-- If use "use_sim "-->
    <xacro:if value="${use_sim}">
        <!-- Inlude gazebo stuff -->
        <xacro:include filename="$(find vikings_bot_description)/xacro/gazebo_control.xacro"/>
    </xacro:if>
    <!-- If not use "use_sim "-->
    <xacro:unless value="${use_sim}">
        <!-- Inlude gazebo stuff -->
        <xacro:include filename="$(find vikings_bot_description)/xacro/ros2_control.xacro"/>

        <xacro:diffdrive_ros2_control name="${robot_name}" use_mock_hardware="false"/>
    </xacro:unless>
    

    <!-- Lidar  sensor -->
    <gazebo reference="lidar_link">
        <sensor name="${robot_name}_lidar" type="ray">
            <always_on>true</always_on>
            <visualize>false</visualize>
            <update_rate>10</update_rate>
            <ray>
                <scan>
                    <horizontal>
                        <samples>720</samples>
                        <resolution>1.0</resolution>
                        <min_angle>-1.57</min_angle>
                        <max_angle>1.57</max_angle>
                    </horizontal>
                </scan>
                <range>
                    <min>0.15</min>
                    <max>10.0</max>
                    <resolution>0.01</resolution>
                </range>
                <noise>
                    <type>gaussian</type>
                    <mean>0.0</mean>
                    <stddev>0.01</stddev>
                </noise>
            </ray>
            <plugin name="${robot_name}_lidar_scan" filename="libgazebo_ros_ray_sensor.so">
                <ros>
                    <namespace>${robot_name}</namespace>
                    <remapping>~/out:=lidar_scan</remapping>
                </ros>
                <frame_name>${robot_name}/lidar_link</frame_name>
                <output_type>sensor_msgs/LaserScan</output_type>
            </plugin>
        </sensor>
    </gazebo>

   <!-- Camera sensor -->
   <!-- 
    uses pal robotics realsense_gazebo_plugin
    https://github.com/pal-robotics/realsense_gazebo_plugin/tree/foxy-devel
   -->
   <gazebo reference="camera_link">
    <sensor name="cameradepth" type="depth">
        <camera name="camera">
          <horizontal_fov>1.57</horizontal_fov>
          <image>
            <width>${camera_depth_width}</width>
            <height>${camera_depth_height}</height>
          </image>
          <clip>
            <near>0.1</near>
            <far>100</far>
          </clip>
          <noise>
            <type>gaussian</type>
            <mean>0.0</mean>
            <stddev>0.100</stddev>
          </noise>
        </camera>
        <always_on>1</always_on>
        <update_rate>30</update_rate>
        <visualize>0</visualize>
      </sensor>
      <sensor name="cameracolor" type="camera">
        <camera name="camera">
          <horizontal_fov>1.57</horizontal_fov>
          <image>
            <width>${camera_color_width}</width>
            <height>${camera_color_height}</height>
            <format>RGB_INT8</format>
          </image>
          <clip>
            <near>0.1</near>
            <far>100</far>
          </clip>
          <noise>
            <type>gaussian</type>
            <mean>0.0</mean>
            <stddev>0.007</stddev>
          </noise>
        </camera>
        <always_on>1</always_on>
        <update_rate>30</update_rate>
        <visualize>1</visualize>
      </sensor>
      <sensor name="cameraired1" type="camera">
        <camera name="camera">
          <horizontal_fov>1.57</horizontal_fov>
          <image>
            <width>${camera_depth_width}</width>
            <height>${camera_depth_height}</height>
            <format>L_INT8</format>
          </image>
          <clip>
            <near>0.1</near>
            <far>100</far>
          </clip>
          <noise>
            <type>gaussian</type>
            <mean>0.0</mean>
            <stddev>0.05</stddev>
          </noise>
        </camera>
        <always_on>1</always_on>
        <update_rate>1</update_rate>
        <visualize>0</visualize>
      </sensor>
      <sensor name="cameraired2" type="camera">
        <camera name="camera">
          <horizontal_fov>1.57</horizontal_fov>
          <image>
            <width>${camera_depth_width}</width>
            <height>${camera_depth_height}</height>
            <format>L_INT8</format>
          </image>
          <clip>
            <near>0.1</near>
            <far>100</far>
          </clip>
          <noise>
            <type>gaussian</type>
            <mean>0.0</mean>
            <stddev>0.05</stddev>
          </noise>
        </camera>
        <always_on>1</always_on>
        <update_rate>1</update_rate>
        <visualize>0</visualize>
      </sensor>
   </gazebo>
    
   <gazebo>
    <plugin name="${robot_name}_camera" filename="librealsense_gazebo_plugin.so">
        <prefix>camera</prefix>
        <!-- 
            actual FPS (and publishing rate, Hz) is 6 (at 1280x720) for realsense depth module.
            Plugin caps depth FPS at 6. To increase FPS, change resolution in properties.xacro
        -->
        <depthUpdateRate>30.0</depthUpdateRate>
        <colorUpdateRate>30.0</colorUpdateRate>
        <infraredUpdateRate>1.0</infraredUpdateRate>
        <!--For simulation assume that depth image is aligned in color frame (for real realsense it will be)-->
        <depthTopicName>${robot_name}/camera/aligned_depth_to_color/image_raw</depthTopicName>
      	<depthCameraInfoTopicName>${robot_name}/camera/depth/camera_info</depthCameraInfoTopicName>
      	<colorTopicName>${robot_name}/camera/color/image_raw</colorTopicName>
      	<colorCameraInfoTopicName>${robot_name}/camera/color/camera_info</colorCameraInfoTopicName>
        <!--real realsense camera does not publish infared image topics, but removing these params breaks the plugin-->
      	<infrared1TopicName>${robot_name}/camera/infra1/image_raw</infrared1TopicName>
      	<infrared1CameraInfoTopicName>${robot_name}/camera/infra1/camera_info</infrared1CameraInfoTopicName>
      	<infrared2TopicName>${robot_name}/infra2/image_raw</infrared2TopicName>
      	<infrared2CameraInfoTopicName>${robot_name}/camera/infra2/camera_info</infrared2CameraInfoTopicName>
        <colorOpticalframeName>${robot_name}/camera_color_optical_frame</colorOpticalframeName>
        <depthOpticalframeName>${robot_name}/camera_depth_optical_frame</depthOpticalframeName>
        <infrared1OpticalframeName>${robot_name}/camera_left_ir_optical_frame</infrared1OpticalframeName>
        <infrared2OpticalframeName>${robot_name}/camera_right_ir_optical_frame</infrared2OpticalframeName>
        <rangeMinDepth>0.3</rangeMinDepth>
        <rangeMaxDepth>3.0</rangeMaxDepth>
        <pointCloud>true</pointCloud>
        <pointCloudTopicName>${robot_name}/camera/depth/color/points</pointCloudTopicName>
        <pointCloudCutoff>0.3</pointCloudCutoff>
    </plugin>
   </gazebo>

</robot>
